<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevGate.Data</name>
    </assembly>
    <members>
        <member name="T:DevGate.Data.Constants.Sql">
            <summary>
            Constants for SQL Seeder
            </summary>
        </member>
        <member name="T:DevGate.Data.Constants.Sql.Suffixes">
            <summary>
            File suffixes
            </summary>
        </member>
        <member name="F:DevGate.Data.Constants.Sql.Suffixes.Functions">
            <summary>
            Functions
            </summary>
        </member>
        <member name="F:DevGate.Data.Constants.Sql.Suffixes.Procudures">
            <summary>
            Procudures
            </summary>
        </member>
        <member name="F:DevGate.Data.Constants.Sql.Suffixes.Synonyms">
            <summary>
            Synonyms
            </summary>
        </member>
        <member name="F:DevGate.Data.Constants.Sql.Suffixes.Triggers">
            <summary>
            Triggers
            </summary>
        </member>
        <member name="F:DevGate.Data.Constants.Sql.Suffixes.Views">
            <summary>
            Views
            </summary>
        </member>
        <member name="T:DevGate.Data.Contexts.IDbContext">
            <summary>
            Represents an context controlling interface for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Contexts.IDbContext.ChangeTracker">
            <summary>
            Provides information and operations for the entity instances this context is tracking.
            </summary>
        </member>
        <member name="P:DevGate.Data.Contexts.IDbContext.UserScope">
            <summary>
            See <see cref="T:DevGate.Data.Other.UserContextScope"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Contexts.IDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> changes
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Contexts.IDbContext.Set``1">
            <summary>
            Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> to query and save instances of TEntity. Implement as a `new` method which returns the base <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Set``1"/> method
            </summary>
            <typeparam name="TEntity">Entity type in the set</typeparam>
            <returns>Set of given entity type</returns>
        </member>
        <member name="T:DevGate.Data.Extensions.IDbContextExtensions">
            <summary>
            Extension methods for <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.IDbContextExtensions.ConcurrencySave(DevGate.Data.Contexts.IDbContext,System.Int32,Microsoft.Extensions.Logging.ILogger,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves all changes in this context to the database with with retries in the event of concurrency failure.
            </summary>
            <param name="context">Context instance</param>
            <param name="retryAttempts">Retry attempts</param>
            <param name="logger">Logger instance</param>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns>Number of affected records</returns>
        </member>
        <member name="M:DevGate.Data.Extensions.IDbContextExtensions.GetValidationErrors(DevGate.Data.Contexts.IDbContext)">
            <summary>
            Gets all validation errors
            </summary>
            <param name="context">Context instances</param>
            <returns>Dictionary of entity with validation errors</returns>
        </member>
        <member name="M:DevGate.Data.Extensions.IDbContextExtensions.SetAuditingFields(DevGate.Data.Contexts.IDbContext)">
            <summary>
            Set the res[ective entitys' audit fields
            </summary>
            <param name="context">Context instance</param>
        </member>
        <member name="T:DevGate.Data.Extensions.Services.ServiceCollectionExtensions">
            <summary>
            Extends the IServiceCollection with methods that enhance DevGate.Data
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddAuditField(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a default implementation of <see cref="T:DevGate.Data.Other.AuditFields"/> to the service collection.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddDataServices``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Adds DbContext, EntityRepository, and sql seeder
            </summary>
            <typeparam name="TContext">The type to add data services to.</typeparam>
            <param name="services"></param>
            <param name="optionsAction">An optional action to configure the Microsoft.EntityFrameworkCore.DbContextOptions for the context.</param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddDataServices``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Adds DbContext, custom IEntityRepository, and sql seeder
            </summary>
            <typeparam name="TContext">The type to add data services to.</typeparam>
            <typeparam name="TRepository">The repository to use for the DbContext that is registered in these data services.</typeparam>
            <param name="services"></param>
            <param name="optionsAction">An optional action to configure the Microsoft.EntityFrameworkCore.DbContextOptions for the context.</param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddSeeder``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevGate.Data.Seeds.IDbContextSeederOptions{``1})">
            <summary>
            Adds a new database seeder to the service collection with the specified options.
            </summary>
            <typeparam name="TSeeder"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:DevGate.Data.Extensions.Services.ServiceProviderExtensions">
            <summary>
            Adds features to <see cref="T:System.IServiceProvider"/> for DevGate.Data
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.EnsureDatabaseCreated``1(System.IServiceProvider)">
            <summary>
            Calls the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated"/> method on the DbContext
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.Migrate``1(System.IServiceProvider)">
            <summary>
            Calls <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade"/>.Migrate() on the specified type.
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.Seed``1(System.IServiceProvider)">
            <summary>
            Calls all the seed methods on the registered <see cref="T:DevGate.Data.Seeds.IDbContextSeeder"/> on the DbContext
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:DevGate.Data.Extensions.Tests.SpecificationTestExtensions">
            <summary>
            Testing extension methods for <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.Tests.SpecificationTestExtensions.Satisfies``1(DevGate.Data.Specifications.Specification{``0},``0)">
            <summary>
            Determines if the specification satisfies the entity
            </summary>
            <param name="specification">Specification instance</param>
            <param name="entity">Entity instance</param>
            <returns>Whether entity is satisfied by Specifcation</returns>
        </member>
        <member name="T:DevGate.Data.Migrations.IMigratable">
            <summary>
            Migration methods
            </summary>
        </member>
        <member name="M:DevGate.Data.Migrations.IMigratable.Migrate(System.IServiceProvider)">
            <summary>
            Performs a migration on the object using the specified service provider
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:DevGate.Data.Migrations.IMigratable.SeedDatabase(System.IServiceProvider)">
            <summary>
            Performs a database seed ob the object using the service provider
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:DevGate.Data.Migrations.Migratable`1">
            <summary>
            Migratable object
            </summary>
        </member>
        <member name="M:DevGate.Data.Migrations.Migratable`1.Migrate(System.IServiceProvider)">
            <summary>
            Migrate the object using the <see cref="T:System.IServiceProvider"/>
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:DevGate.Data.Migrations.Migratable`1.SeedDatabase(System.IServiceProvider)">
            <summary>
            Seeds the object using the <see cref="T:System.IServiceProvider"/>
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:DevGate.Data.Other.AuditFields">
            <summary>
            Retrieve all audit types and their respective fields
            </summary>
        </member>
        <member name="M:DevGate.Data.Other.AuditFields.#ctor">
            <summary>
            Initializes new instance of <see cref="T:DevGate.Data.Other.AuditFields"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Other.AuditFields.Fields">
            <summary>
            Dictionary of audit types and their respective fields
            </summary>
        </member>
        <member name="T:DevGate.Data.Other.UserContextScope">
            <summary>
            Provides information for the context as to what is performing actions
            </summary>
        </member>
        <member name="P:DevGate.Data.Other.UserContextScope.Username">
            <summary>
            User performing the action
            </summary>
        </member>
        <member name="T:DevGate.Data.Repositories.EntityRepository`1">
            <summary>
            See <see cref="T:DevGate.Data.Repositories.IEntityRepository`1"/>
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.AuditFields">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.AuditFields"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.Logger">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.Logger"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.RetryAttempts">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.RetryAttempts"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.DataContext">
            <summary>
            Context instance
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.#ctor(`0,Microsoft.Extensions.Logging.ILogger{`0})">
            <summary>
            Main Constructor
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Attach``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.FindAsync``2(``1)">
            <summary>
            See <see cref="!:IEntityRepository&lt;TContext&gt;.FindAsync&lt;TEntity&gt;(Specification&lt;TEntity&gt;)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.GetAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.GetAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Restore``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Restore``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Restore``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Restore``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.SaveAsync">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.SaveAsync"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="T:DevGate.Data.Repositories.IEntityRepository`1">
            <summary>
            Main repository for performing operations on the entities inside the context
            </summary>
            <typeparam name="TContext"><see cref="T:DevGate.Data.Contexts.IDbContext"/> type</typeparam>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.AuditFields">
            <summary>
            Information related to  Audit Fields types and their respective property names
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.RetryAttempts">
            <summary>
            Number of retry attemps to save after optimistic concurreny fails
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds the collection of entites to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Etnity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0)">
            <summary>
            Adds the entity into the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(``0)">
            <summary>
            Attach the entities to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Attach the entities to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.FindAsync``2(``1)">
            <summary>
            Find the entity based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Finds entity based on primary key</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.GetAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Get the entity based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Returns first entity that matches the specification, else null.</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Returns a collection of entties based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Collection of the entities if found, else an empty collection</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            Retrieves a list of entities from the <see cref="T:DevGate.Data.Contexts.IDbContext"/> based on the query <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="specification">Entity specification</param>
            <param name="parameters">Query paramaters</param>
            <returns>Parameter results</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0)">
            <summary>
            Remove an entity from the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes a collection of entities from the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Restore``1(``0)">
            <summary>
            Restore a soft deleted entity by setting <see cref="P:DevGate.Domain.Entities.NonDeletableEntity.DeletedBy"/> and <see cref="P:DevGate.Domain.Entities.NonDeletableEntity.DeletedOn"/> to null
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Restore``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Restore a collection of soft deleted entities by setting their <see cref="P:DevGate.Domain.Entities.NonDeletableEntity.DeletedBy"/> and <see cref="P:DevGate.Domain.Entities.NonDeletableEntity.DeletedOn"/> to null
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.SaveAsync">
            <summary>
            Saves all changes made ot the context
            </summary>
            <returns>Number of records affected</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Returns a single entity based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Entity object</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0)">
            <summary>
            Attach an entity to this context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Attaches the collection of altered entities to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeeder`1">
            <summary>
            Seeder for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
            <typeparam name="TContext">Context instance</typeparam>
        </member>
        <member name="M:DevGate.Data.Seeds.IDbContextSeeder`1.Seed(`0)">
            <summary>
            Seeds into specified context
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeeder">
            <summary>
            Seeder for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Seeds.IDbContextSeeder.Executions">
            <summary>
            Gets the number of executions on the seeder in one process.
            </summary>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeederOptions`1">
            <summary>
            Seeder options
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:DevGate.Data.Seeds.IDbContextSeederOptions`1.Logger">
            <summary>
            Logger to be used by the context seeder
            </summary>
        </member>
        <member name="T:DevGate.Data.Seeds.SqlSeeder`1">
            <summary>
            Sql seeder instance
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:DevGate.Data.Seeds.SqlSeeder`1.#ctor(DevGate.Data.Seeds.SqlSeederOptions{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:DevGate.Data.Seeds.SqlSeeder`1.Executions">
            <summary>
            Gets the number of scripts executed during the migration
            </summary>
        </member>
        <member name="M:DevGate.Data.Seeds.SqlSeeder`1.Seed(`0)">
            <summary>
            Seed the ob
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:DevGate.Data.Seeds.SqlSeeder`1.GetScripts(System.String)">
            <summary>
            Returns all script contents from files that match the specified suffix
            </summary>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Seeds.SqlSeeder`1.SplitSqlCode(System.String)">
            <summary>
            Split SQL cod
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:DevGate.Data.Seeds.SqlSeederOptions`1">
            <summary>
            Configuration options for <see cref="T:DevGate.Data.Seeds.SqlSeeder`1"/> instance
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:DevGate.Data.Seeds.SqlSeederOptions`1.Assembly">
            <summary>
            Gets or sets the assembly to run the seeder on
            </summary>
        </member>
        <member name="P:DevGate.Data.Seeds.SqlSeederOptions`1.FileSuffixes">
            <summary>
            Gets or sets the list of file suffixes to look for. If not set uses internal defaults.
            </summary>
        </member>
        <member name="P:DevGate.Data.Seeds.SqlSeederOptions`1.Logger">
            <summary>
            Gets or sets the logger to use while seeding
            </summary>
        </member>
        <member name="P:DevGate.Data.Seeds.SqlSeederOptions`1.ScriptSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevGate.Data.Specifications.AndSpecification`1">
            <summary>
            Product of two (2) <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DevGate.Data.Specifications.AndSpecification`1.#ctor(DevGate.Data.Specifications.Specification{`0},DevGate.Data.Specifications.Specification{`0})">
            <summary>
            Initializes a new instance of <see cref="T:DevGate.Data.Specifications.AndSpecification`1"/>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:DevGate.Data.Specifications.AndSpecification`1.Evaluate">
            <summary>
            Overrides base <see cref="M:DevGate.Data.Specifications.Specification`1.Evaluate"/> to return AND product of two specified <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
        </member>
        <member name="T:DevGate.Data.Specifications.OrSpecification`1">
            <summary>
            Combination of two (2) <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DevGate.Data.Specifications.OrSpecification`1.#ctor(DevGate.Data.Specifications.Specification{`0},DevGate.Data.Specifications.Specification{`0})">
            <summary>
            Initializes a new instance of <see cref="T:DevGate.Data.Specifications.OrSpecification`1"/>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:DevGate.Data.Specifications.OrSpecification`1.Evaluate">
            <summary>
            Overrides base <see cref="M:DevGate.Data.Specifications.Specification`1.Evaluate"/> to return OR combination of two <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevGate.Data.Specifications.Specification`1">
            <summary>
            Entity-based specifications designed after the Specification and Repository pattern, to be used with <see cref="N:Microsoft.EntityFrameworkCore"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:DevGate.Data.Specifications.Specification`1.IsDistinct">
            <summary>
            Indicates whether Distinct modifier has been applied
            </summary>
        </member>
        <member name="P:DevGate.Data.Specifications.Specification`1.Modifiers">
            <summary>
            Returns current modifiers specified on the specification
            </summary>
        </member>
        <member name="P:DevGate.Data.Specifications.Specification`1.Tag">
            <summary>
            Tag for the specification
            </summary>
        </member>
        <member name="P:DevGate.Data.Specifications.Specification`1.WithTracking">
            <summary>
            Indicates whether the entity is traced in the context
            </summary>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.AddTag(System.String)">
            <summary>
            Add tag to specification
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.And(DevGate.Data.Specifications.Specification{`0})">
            <summary>
            Returns product of the two <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.AsNoTracking">
            <summary>
            Set specification to not
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Distinct">
            <summary>
            Adds <see cref="T:System.Linq.IQueryable`1"/> modifier to the specification that returns a distinct collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.DistinctBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds <see cref="T:System.Linq.IQueryable`1"/> modifier to the specification that returns a distinct collection based on the property
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Evaluate">
            <summary>
            Compile and evaluate the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Filter(System.Linq.IQueryable{`0})">
            <summary>
            Filter the provided <see cref="T:System.Linq.IQueryable`1"/> with current specifications
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.HasTag(System.String)">
            <summary>
            Indicates whether the specification has the tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds <see cref="T:System.Linq.IQueryable`1"/> modifier to the specification to include the property in the query result
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Modify(System.Linq.IQueryable{`0})">
            <summary>
            Modify the provided <see cref="T:System.Linq.IQueryable`1"/> with current modifiers
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.Or(DevGate.Data.Specifications.Specification{`0})">
            <summary>
            Returns combination of the two <see cref="T:DevGate.Data.Specifications.Specification`1" />
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds <see cref="T:System.Linq.IQueryable`1"/> modifier to the specification that sorts the query results in ascending order
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Specifications.Specification`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds <see cref="T:System.Linq.IQueryable`1"/> modifier to the specification that sorts the query results in descending order
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
    </members>
</doc>
