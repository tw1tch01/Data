<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevGate.Data</name>
    </assembly>
    <members>
        <member name="T:DevGate.Data.Contexts.IDbContext">
            <summary>
            Represents an context controlling interface for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Contexts.IDbContext.ContextTracker">
            <summary>
            Provides information and operations for the entity instances this context is tracking.
            </summary>
        </member>
        <member name="M:DevGate.Data.Contexts.IDbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> changes
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Contexts.IDbContext.Set``1">
            <summary>
            Creates a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> to query and save instances of TEntity. />
            </summary>
            <typeparam name="TEntity">Entity type in the set</typeparam>
            <returns>Set of given entity type</returns>
        </member>
        <member name="T:DevGate.Data.Extensions.Services.ServiceCollectionExtensions">
            <summary>
            Extends the IServiceCollection with methods that enhance DevGate.Data
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddAuditField(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a default implementation of <see cref="T:DevGate.Data.Other.AuditFields"/> to the service collection.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddDataServices``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Adds DbContext, EntityRepository, and sql seeder
            </summary>
            <typeparam name="TContext">The type to add data services to.</typeparam>
            <param name="services"></param>
            <param name="optionsAction">An optional action to configure the Microsoft.EntityFrameworkCore.DbContextOptions for the context.</param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddDataServices``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Adds DbContext, custom IEntityRepository, and sql seeder
            </summary>
            <typeparam name="TContext">The type to add data services to.</typeparam>
            <typeparam name="TRepository">The repository to use for the DbContext that is registered in these data services.</typeparam>
            <param name="services"></param>
            <param name="optionsAction">An optional action to configure the Microsoft.EntityFrameworkCore.DbContextOptions for the context.</param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceCollectionExtensions.AddSeeder``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevGate.Data.Seeds.IDbContextSeederOptions{``1})">
            <summary>
            Adds a new database seeder to the service collection with the specified options.
            </summary>
            <typeparam name="TSeeder"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:DevGate.Data.Extensions.Services.ServiceProviderExtensions">
            <summary>
            Adds features to <see cref="T:System.IServiceProvider"/> for DevGate.Data
            </summary>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.EnsureDatabaseCreated``1(System.IServiceProvider)">
            <summary>
            Calls the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated"/> method on the DbContext
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.Migrate``1(System.IServiceProvider)">
            <summary>
            Calls <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade"/>.Migrate() on the specified type.
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Extensions.Services.ServiceProviderExtensions.Seed``1(System.IServiceProvider)">
            <summary>
            Calls all the seed methods on the registered <see cref="T:DevGate.Data.Seeds.IDbContextSeeder"/> on the DbContext
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:DevGate.Data.Migrations.IMigratable.Migrate(System.IServiceProvider)">
            <summary>
            Performs a migration on the object using the specified service provider
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:DevGate.Data.Migrations.IMigratable.SeedDatabase(System.IServiceProvider)">
            <summary>
            Performs a database seed ob the object using the service provider
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:DevGate.Data.Repositories.EntityRepository`1">
            <summary>
            See <see cref="T:DevGate.Data.Repositories.IEntityRepository`1"/>
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.AuditFields">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.AuditFields"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.Logger">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.Logger"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.RetryAttempts">
            <summary>
            See <see cref="P:DevGate.Data.Repositories.IEntityRepository`1.RetryAttempts"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.EntityRepository`1.DataContext">
            <summary>
            Context instance
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.#ctor(`0,Microsoft.Extensions.Logging.ILogger{`0})">
            <summary>
            Main Constructor
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.AddAsync``1(``0,System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0,System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Attach``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.FindAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.FindAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(``0,System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0,System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.SaveAsync">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.SaveAsync"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(``0)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(``0,System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0,System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})"/>
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.EntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            See <see cref="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="T:DevGate.Data.Repositories.IEntityRepository`1">
            <summary>
            Main repository for performing operations on the entities inside the context
            </summary>
            <typeparam name="TContext"><see cref="T:DevGate.Data.Contexts.IDbContext"/> type</typeparam>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.AuditFields">
            <summary>
            Information related to  Audit Fields types and their respective property names
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:DevGate.Data.Repositories.IEntityRepository`1.RetryAttempts">
            <summary>
            Number of retry attemps to save after optimistic concurreny fails
            </summary>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds the collection of entites to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Etnity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            Adds the collection of entites to the <see cref="T:DevGate.Data.Contexts.IDbContext"/> and sets their audit fields
            </summary>
            <typeparam name="TEntity">Entity types</typeparam>
            <param name="entities">Collection of entity objects</param>
            <param name="createdBy">Who created the entity</param>
            <param name="createdOn">When the entity was created</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0)">
            <summary>
            Adds the entity into the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.AddAsync``1(``0,System.String,System.DateTime)">
            <summary>
            Adds the entity into the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <param name="createdBy">Who created the entity</param>
            <param name="createdOn">When the entity was created</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(``0)">
            <summary>
            Attach the entities to the <see cref="!:TContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Attach``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Attach the entities to the <see cref="!:TContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.FindAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Find the entity based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>If entity found, returns an object of the entity, else null.</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.ListAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Returns a collection of entties based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Collection of the entities if found, else an empty collection</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.QueryAsync``2(DevGate.Data.Specifications.Specification{``0},System.Func{System.Linq.IQueryable{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            Retrieves a list of entities from the <see cref="T:DevGate.Data.Contexts.IDbContext"/> based on the query <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <param name="parameters">Query paramaters</param>
            <returns>Parameter results</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0)">
            <summary>
            Remove an entity from the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(``0,System.String,System.DateTime)">
            <summary>
            Soft deletes the <see cref="T:DevGate.Data.Entities.NonDeletableEntity"/> by setting the property <see cref="!:NonDeletableEntity.IsRemoved"/> true, and sets the audit fields
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <param name="deletedBy">Who deleted the entity</param>
            <param name="deletedOn">When was the entity deleted</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes a collection of entities from the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Remove``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            Soft deletes a collection of <see cref="T:DevGate.Data.Entities.NonDeletableEntity"/> by setting the property <see cref="!:NonDeletableEntity.IsRemoved"/> true, and sets the audit fields
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <param name="deletedBy">Who soft deleted the entities</param>
            <param name="deletedOn">When the entities were soft deleted</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.SaveAsync">
            <summary>
            Executes the <see cref="M:DevGate.Data.Contexts.IDbContext.SaveChangesAsync(System.Threading.CancellationToken)"/> action
            </summary>
            <returns>Number of records effected</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.SingleAsync``1(DevGate.Data.Specifications.Specification{``0})">
            <summary>
            Returns a single entity based on the <see cref="T:DevGate.Data.Specifications.Specification`1"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="specification">Entity specification</param>
            <returns>Entity object</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0)">
            <summary>
            Attach an entity to this context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(``0,System.String,System.DateTime)">
            <summary>
            Attach an entity to this context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity object</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Attaches the collection of altered entities to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <returns>Repository instance</returns>
        </member>
        <member name="M:DevGate.Data.Repositories.IEntityRepository`1.Update``1(System.Collections.Generic.ICollection{``0},System.String,System.DateTime)">
            <summary>
            Attaches and updates the entity to the <see cref="T:DevGate.Data.Contexts.IDbContext"/>
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Collection of entity objects</param>
            <param name="updatedBy">Who updated the entities</param>
            /// <param name="updatedBy">When the entities were updated</param>
            <returns>Repository instance</returns>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeeder`1">
            <summary>
            Seeder for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
            <typeparam name="TContext">Context instance</typeparam>
        </member>
        <member name="M:DevGate.Data.Seeds.IDbContextSeeder`1.Seed(`0)">
            <summary>
            Seeds into specified context
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeeder">
            <summary>
            Seeder for <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
        </member>
        <member name="P:DevGate.Data.Seeds.IDbContextSeeder.Executions">
            <summary>
            Gets the number of executions on the seeder in one process.
            </summary>
        </member>
        <member name="T:DevGate.Data.Seeds.IDbContextSeederOptions`1">
            <summary>
            Seeder options
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:DevGate.Data.Seeds.IDbContextSeederOptions`1.Logger">
            <summary>
            Logger to be used by the context seeder
            </summary>
        </member>
    </members>
</doc>
